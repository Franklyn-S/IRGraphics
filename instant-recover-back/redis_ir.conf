/////////////////////////////////////////////////////////////////////////////////////////
//		Redis Instant Recovery (RedisIR) configurations file
//	Below are the parameters for executing RedisIR and a brief explanation of its functions. 
//
//	IR_ON == on | true		IR_OFF == off | false


/////////////////////////////////////////////////////////////////////////////////////////
// 				Indexer component options

//	Sequential log filename
//
aof_filename = "logs/sequentialLog.aof";
//
//	Enables Instant Recovery Shema. Otherwise, sequential log recovery is enabled.
//
instant_recovery_state = "ON";  //ON | OFF
//
//	Data structuter of the indexed log. 
//
indexedlog_structure = "BTREE";  //BTREE | HASH.
//
//	Enables sychronous logging indexing, i.e., a transaction must wait the log indexing. 
//	If OFF is setted, the log indexing is asychronous, i.e., a transaction must not wait 
//	for the log indexing. OFF is the default value.
//
//instant_recovery_synchronous = "ON";  //ON | OFF
//
//	Indexed log filename
//
indexedlog_filename = "logs/indexedLog.db";
//
//	Tunes the time interval to index log records. The default value is 500,000 microseconds.
//
//indexer_time_interval = 100000;
//
//	Displays some information about log indexing process. The default value is OFF.
//
//display_indexer_information = "ON";  //ON | OFF
//
//	Time interval (in seconds) to display information about the log indexing when the field
// display_indexer_information is ON. The default value is 60.
//
//indexer_information_time_interaval = 120;
//
//	A client application is used by the Indexer component to index log records from
//	the sequential log to the indexed log.
//	Redis host name. The default host is 127.0.0.1.
//
//redisHostname = "127.0.0.1";
//
//	Redis port. The default host is 6379.
//
//redisPort = 6379;


/////////////////////////////////////////////////////////////////////////////////////////
// 				Checkpointer component options

//	Enables the checkpoint of the indexed log during normal database processing.
//
checkpint_state = "ON";  //ON | OFF
//
//	Number of checkpoint processes to be performed. If the value is 0 (zero), the checkpoint
//	will be perfomed continuously in time invervals. The defaul value is 0.
//
//number_checkpoints = 1
//
//	Enables the self tune of time interval between checkpoint executions. The value of the
//	time interval between checkpoints is self tuned after each checkpoint process. The defaul 
//	value is OFF.
//
//selftune_checkpoint_time_interval = "ON";  //ON | OFF
//
//	A fixed time interval (in seconds) to perform checkpoints. This parameter works only if the 
//	parameter 'selftune_checkpoint_time_interval' is OFF. The default value is 60 seconds.
//
//checkpoint_time_interval = 400;
//
//	Time (in seconds) to start the first checkpoint process after the system startup.
//	If the value is 0 (zero), the first checkpoint process will start only after the full
//	database recovery. The defaul value is 0.
//
//checkpoint_start_time = 200;
//
//	Stops the checkpoint thread after the Memtier benchmark execution.
//	The defaul value is ON.
//
//stop_checkpoint_after_benchmark = "OFF";  //ON | OFF
//
//	Displays some information about checkpoint execution at the end of each checkpoint process. 
//	The default value is OFF.
//
//display_checkpoint_information = "ON";  //ON | OFF


/////////////////////////////////////////////////////////////////////////////////////////
// 				Memtier Bechmark execution options
//	Options to perform Memtier automatically in RedisIR.

//	Enables Memtier automatic execution. The default value is OFF.
//
//memtier_benchmark_state = "ON";  //ON | OFF
//
//	Memtier workload run times. If the value is 0 (zero), the workload will be runned 
//	continuously. The default value is 1.
//
//memtier_benchmark_workload_run_times = 0
//
//	Number of time to restart the database system after the benchmark performing. This
//	useful to simulate successive failures. If the value is 0 (zero) the system will 
//	not be restarted. The default value is 0.
//
//restart_after_bechmarking = 2
//
//	Always stops the benchmark performing after a defined time (in seconds) from the database
//	startup time, even if successive restarts occur, each new workload will be stoped the given
//	time. If the value is 0 (zero) the system will not be stopped. The default value is 0.
//
//time_tostop_benchmarking_always = 160
//
//	Loads the database into memory, starts the workload (if benckmark is ON), shots down the 
//	system after the given time, and then finally restars the system perfoming the workload 
//	completally. It only works if 'restart_after_bechmarking' and 'time_tostop_benchmarking_always' 
//	parameters are disabled. The set value is the time 
//	(in seconds) to restart the sistem after the database is loaded into memomry. If the value 
//	is 0 (zero), nothing is done. The default value is 0.
//
//preload_database_and_restart = 30
//
//	Memtier execution parameters. Run the command line './memtier_benchmark --help' on 
//	Memtier root path to see all parameters. 
//	Below are some examples of parameters.
//
//	First example: sends 100,000 read-only randomized requests per client.
//
//memtier_benchmark_parameters = " --hide-histogram -n 100000 --ratio 0:10  --randomize";
//
//	Second example: changes the prefix of the key name to 'redisIR-'. The key name suffix
//	is on range 1-10000. Example of key = 'redisIR-1'.
//
//memtier_benchmark_parameters = " --hide-histogram --key-prefix='redisIR-' --key-minimum=1 --key-maximum=10000"
//
//	Third example: generates SET commands. "__key__" generates keys by Memtier Key Options. 
//	"__data__" generates values by Memtier Object Options. The key generatioin pattern is 
//	uniform random.
//
//memtier_benchmark_parameters = " --hide-histogram --command='set __key__ __data__' --command-key-pattern=R"
//
//	Fourth example: generates 50,000 commands requests per client. Changes the prefix 
//	of the key name to 'redisIR-'. The key name suffix is on range 1-10000. The operations 
//	are INCR commands. "__key__" generates keys by Memtier Key Options. "__data__" generates 
//	values by Memtier Object Options. The key generatioin pattern is sequential.
//
//memtier_benchmark_parameters = " --hide-histogram -n 50000 --key-prefix='redisIR-' --key-minimum=1 --key-maximum=10000 --command='incr __key__' --command-ratio=10000 --command-key-pattern=S"
//
//	Fifth example: generates 10,000 random commands per client in a ratio 5:5 between SET 
//	and GET commands. Changes the prefix of the key name to 'redisIR-'. The key name suffix 
//	is on range 1-10000.
//memtier_benchmark_parameters = " --hide-histogram -n 10000 --ratio 5:5 --randomize --key-prefix='redisIR-' --key-minimum=1 --key-maximum=10000"


/////////////////////////////////////////////////////////////////////////////////////////
// 				Report options

//	Generates some reports about recovery, checkpoint and indexer. The default value is "OFF". 
//	After the recovery, run the command "saveRecoveryReportToFile <filename>" on redis-cli 
//	to save the file.
//
//generate_recovery_report = "ON";  //ON | OFF
//
//	Name of the file containig some information about recovery. It is used to save the file 
//	automatically.
//
//recovery_report_filename = "recovery_report/recovery_report.txt";
//
//
//	Generates the ratio between log records and tuples in the indexed log before and after
//	a checkpoint process. The default value is OFF.
//
//generate_checkpoint_ratio = "ON";  //ON | OFF
//
//	Generates a CSV file containing some information about all database operantins (commands) 
//	executed. The fields: command name, key of the tuple handled, command start time, command 
//	finishTime, and command type. The default value is OFF.	After executing the commands, run 
//	the command "saveCommandsExecutedToCSV <filename>" on redis-cli to save the file. This file 
//	can be used to generate graphics by the script 'graphic' in Redis root path.
//
//generate_executed_commands_csv = "ON";  //ON | OFF
//
//	Name of the CSV file containing proprieties about operations executed.
//	It is used to save the file automatically.
//
//executed_commands_csv_filename = "datasets/datasets.csv";
//
//	Generates the recovery report and CSV files automatically after the memtier benckmark have 
//	finished. The default value is OFF.
//
//generate_report_files_automatically = "ON";  //ON | OFF
//
//	Overwrites the previous recovery report and CSV files when saving automatically. Otherwise,
//	concatenates the information saved. If sucessive failures occurs in your experiment, you 
//	should use this parameter as OFF to not overwrite the information after a restart. 
//	The default value is ON.
//
//overwrite_report_files = "OFF";  //ON | OFF








